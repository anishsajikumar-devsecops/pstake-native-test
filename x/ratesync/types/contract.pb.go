// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pstake/ratesync/v1beta1/contract.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// msg blob for instantiate contract.
type InstantiateLiquidStakeRateContract struct {
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
}

func (m *InstantiateLiquidStakeRateContract) Reset()         { *m = InstantiateLiquidStakeRateContract{} }
func (m *InstantiateLiquidStakeRateContract) String() string { return proto.CompactTextString(m) }
func (*InstantiateLiquidStakeRateContract) ProtoMessage()    {}
func (*InstantiateLiquidStakeRateContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_11a849967ac18085, []int{0}
}
func (m *InstantiateLiquidStakeRateContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstantiateLiquidStakeRateContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstantiateLiquidStakeRateContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstantiateLiquidStakeRateContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstantiateLiquidStakeRateContract.Merge(m, src)
}
func (m *InstantiateLiquidStakeRateContract) XXX_Size() int {
	return m.Size()
}
func (m *InstantiateLiquidStakeRateContract) XXX_DiscardUnknown() {
	xxx_messageInfo_InstantiateLiquidStakeRateContract.DiscardUnknown(m)
}

var xxx_messageInfo_InstantiateLiquidStakeRateContract proto.InternalMessageInfo

func (m *InstantiateLiquidStakeRateContract) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

// wrapper for liquidstakerate as wasm msg should be marshalled as encodedMsg = { wasmMsg: { wasm MsgDetails } }
type ExecuteLiquidStakeRate struct {
	LiquidStakeRate LiquidStakeRate `protobuf:"bytes,1,opt,name=liquid_stake_rate,json=liquidStakeRate,proto3" json:"liquid_stake_rate"`
}

func (m *ExecuteLiquidStakeRate) Reset()         { *m = ExecuteLiquidStakeRate{} }
func (m *ExecuteLiquidStakeRate) String() string { return proto.CompactTextString(m) }
func (*ExecuteLiquidStakeRate) ProtoMessage()    {}
func (*ExecuteLiquidStakeRate) Descriptor() ([]byte, []int) {
	return fileDescriptor_11a849967ac18085, []int{1}
}
func (m *ExecuteLiquidStakeRate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecuteLiquidStakeRate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecuteLiquidStakeRate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecuteLiquidStakeRate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteLiquidStakeRate.Merge(m, src)
}
func (m *ExecuteLiquidStakeRate) XXX_Size() int {
	return m.Size()
}
func (m *ExecuteLiquidStakeRate) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteLiquidStakeRate.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteLiquidStakeRate proto.InternalMessageInfo

func (m *ExecuteLiquidStakeRate) GetLiquidStakeRate() LiquidStakeRate {
	if m != nil {
		return m.LiquidStakeRate
	}
	return LiquidStakeRate{}
}

// msg blob for execute contract.
type LiquidStakeRate struct {
	DefaultBondDenom string `protobuf:"bytes,1,opt,name=default_bond_denom,json=defaultBondDenom,proto3" json:"default_bond_denom,omitempty"`
	StkDenom         string `protobuf:"bytes,2,opt,name=stk_denom,json=stkDenom,proto3" json:"stk_denom,omitempty"`
	// cvalue = default_bond_denom_price/stk_denom_price
	// cvalue = stk_denom_supply/default_bond_denom_supply
	CValue              github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=c_value,json=cValue,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"c_value"`
	ControllerChainTime time.Time                              `protobuf:"bytes,4,opt,name=controller_chain_time,json=controllerChainTime,proto3,stdtime" json:"controller_chain_time"`
}

func (m *LiquidStakeRate) Reset()         { *m = LiquidStakeRate{} }
func (m *LiquidStakeRate) String() string { return proto.CompactTextString(m) }
func (*LiquidStakeRate) ProtoMessage()    {}
func (*LiquidStakeRate) Descriptor() ([]byte, []int) {
	return fileDescriptor_11a849967ac18085, []int{2}
}
func (m *LiquidStakeRate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidStakeRate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidStakeRate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidStakeRate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidStakeRate.Merge(m, src)
}
func (m *LiquidStakeRate) XXX_Size() int {
	return m.Size()
}
func (m *LiquidStakeRate) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidStakeRate.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidStakeRate proto.InternalMessageInfo

func (m *LiquidStakeRate) GetDefaultBondDenom() string {
	if m != nil {
		return m.DefaultBondDenom
	}
	return ""
}

func (m *LiquidStakeRate) GetStkDenom() string {
	if m != nil {
		return m.StkDenom
	}
	return ""
}

func (m *LiquidStakeRate) GetControllerChainTime() time.Time {
	if m != nil {
		return m.ControllerChainTime
	}
	return time.Time{}
}

func init() {
	proto.RegisterType((*InstantiateLiquidStakeRateContract)(nil), "pstake.ratesync.v1beta1.InstantiateLiquidStakeRateContract")
	proto.RegisterType((*ExecuteLiquidStakeRate)(nil), "pstake.ratesync.v1beta1.ExecuteLiquidStakeRate")
	proto.RegisterType((*LiquidStakeRate)(nil), "pstake.ratesync.v1beta1.LiquidStakeRate")
}

func init() {
	proto.RegisterFile("pstake/ratesync/v1beta1/contract.proto", fileDescriptor_11a849967ac18085)
}

var fileDescriptor_11a849967ac18085 = []byte{
	// 468 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xe3, 0x52, 0x4a, 0xbb, 0x1c, 0x0a, 0xa6, 0x40, 0x08, 0x92, 0x83, 0x72, 0xa8, 0x7a,
	0x20, 0xbb, 0x6a, 0x39, 0xc2, 0x85, 0x34, 0x1c, 0x90, 0x90, 0x90, 0xdc, 0x16, 0xa1, 0x5e, 0xac,
	0xf5, 0x7a, 0xea, 0xae, 0x62, 0xef, 0x1a, 0xef, 0x38, 0x6a, 0x1f, 0x02, 0xa9, 0x0f, 0xd3, 0x87,
	0xe8, 0xb1, 0xea, 0x09, 0x71, 0x28, 0x28, 0x79, 0x11, 0xb4, 0xbb, 0x8e, 0x0a, 0x45, 0x3d, 0x25,
	0x3b, 0xf3, 0xe9, 0x9f, 0xf9, 0xe7, 0x37, 0xd9, 0xac, 0x0c, 0xf2, 0x09, 0xb0, 0x9a, 0x23, 0x98,
	0x53, 0x25, 0xd8, 0x74, 0x3b, 0x05, 0xe4, 0xdb, 0x4c, 0x68, 0x85, 0x35, 0x17, 0x48, 0xab, 0x5a,
	0xa3, 0x0e, 0x9f, 0x7b, 0x8e, 0x2e, 0x38, 0xda, 0x72, 0xbd, 0x8d, 0x5c, 0xe7, 0xda, 0x31, 0xcc,
	0xfe, 0xf3, 0x78, 0xef, 0x85, 0xd0, 0xa6, 0xd4, 0x26, 0xf1, 0x0d, 0xff, 0x68, 0x5b, 0xfd, 0x5c,
	0xeb, 0xbc, 0x00, 0xe6, 0x5e, 0x69, 0x73, 0xc4, 0x50, 0x96, 0x60, 0x90, 0x97, 0x95, 0x07, 0x06,
	0xfb, 0x64, 0xf0, 0x51, 0x19, 0xe4, 0x0a, 0x25, 0x47, 0xf8, 0x24, 0xbf, 0x35, 0x32, 0xdb, 0xb3,
	0xc3, 0x63, 0x8e, 0xb0, 0xdb, 0xae, 0x15, 0x52, 0x72, 0x9f, 0x67, 0xa5, 0x54, 0xdd, 0xe0, 0x55,
	0xb0, 0xb5, 0x36, 0xea, 0x5e, 0x9d, 0x0f, 0x37, 0xda, 0x39, 0xef, 0xb3, 0xac, 0x06, 0x63, 0xf6,
	0xb0, 0x96, 0x2a, 0x8f, 0x3d, 0x36, 0x40, 0xf2, 0xec, 0xc3, 0x09, 0x88, 0xe6, 0x3f, 0xc5, 0xf0,
	0x90, 0x3c, 0x2e, 0x5c, 0x29, 0x71, 0x16, 0x13, 0x6b, 0xd1, 0xa9, 0x3e, 0xdc, 0xd9, 0xa2, 0x77,
	0xd8, 0xa6, 0xb7, 0x44, 0x46, 0xcb, 0x17, 0xd7, 0xfd, 0x4e, 0xbc, 0x5e, 0xfc, 0x5b, 0x1e, 0x7c,
	0x5f, 0x22, 0xeb, 0xb7, 0xe7, 0xbd, 0x26, 0x61, 0x06, 0x47, 0xbc, 0x29, 0x30, 0x49, 0xb5, 0xca,
	0x92, 0x0c, 0x94, 0x2e, 0xbd, 0x8d, 0xf8, 0x51, 0xdb, 0x19, 0x69, 0x95, 0x8d, 0x6d, 0x3d, 0x7c,
	0x49, 0xd6, 0x0c, 0x4e, 0x5a, 0x68, 0xc9, 0x41, 0xab, 0x06, 0x27, 0xbe, 0x79, 0x40, 0x1e, 0x88,
	0x64, 0xca, 0x8b, 0x06, 0xba, 0xf7, 0xdc, 0x19, 0xde, 0xd9, 0x35, 0x7e, 0x5e, 0xf7, 0x37, 0x73,
	0x89, 0xc7, 0x4d, 0x4a, 0x85, 0x2e, 0xdb, 0xeb, 0xb7, 0x3f, 0x43, 0x93, 0x4d, 0x18, 0x9e, 0x56,
	0x60, 0xe8, 0x18, 0xc4, 0xd5, 0xf9, 0x90, 0xb4, 0x47, 0x1b, 0x83, 0x88, 0x57, 0xc4, 0x17, 0xab,
	0x15, 0x7e, 0x25, 0x4f, 0x5d, 0xfc, 0xba, 0x28, 0xa0, 0x4e, 0xc4, 0x31, 0x97, 0x2a, 0xb1, 0x29,
	0x75, 0x97, 0xdd, 0x55, 0x7a, 0xd4, 0x47, 0x48, 0x17, 0x11, 0xd2, 0xfd, 0x45, 0x84, 0xa3, 0x55,
	0xbb, 0xc0, 0xd9, 0xaf, 0x7e, 0x10, 0x3f, 0xb9, 0x91, 0xd8, 0xb5, 0x0a, 0x96, 0x19, 0x1d, 0x5c,
	0xcc, 0xa2, 0xe0, 0x72, 0x16, 0x05, 0xbf, 0x67, 0x51, 0x70, 0x36, 0x8f, 0x3a, 0x97, 0xf3, 0xa8,
	0xf3, 0x63, 0x1e, 0x75, 0x0e, 0xdf, 0xfe, 0xb5, 0x71, 0x05, 0xb5, 0x91, 0x06, 0x41, 0x09, 0xf8,
	0xac, 0x80, 0xf9, 0x0c, 0x86, 0x8a, 0xa3, 0x9c, 0x02, 0x9b, 0xee, 0xb0, 0x93, 0x9b, 0xcf, 0xd5,
	0x59, 0x49, 0x57, 0xdc, 0x26, 0x6f, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0xaa, 0x3a, 0xfb, 0xa4,
	0xce, 0x02, 0x00, 0x00,
}

func (m *InstantiateLiquidStakeRateContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstantiateLiquidStakeRateContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstantiateLiquidStakeRateContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintContract(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExecuteLiquidStakeRate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteLiquidStakeRate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecuteLiquidStakeRate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LiquidStakeRate.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintContract(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *LiquidStakeRate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidStakeRate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidStakeRate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.ControllerChainTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ControllerChainTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintContract(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x22
	{
		size := m.CValue.Size()
		i -= size
		if _, err := m.CValue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintContract(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.StkDenom) > 0 {
		i -= len(m.StkDenom)
		copy(dAtA[i:], m.StkDenom)
		i = encodeVarintContract(dAtA, i, uint64(len(m.StkDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DefaultBondDenom) > 0 {
		i -= len(m.DefaultBondDenom)
		copy(dAtA[i:], m.DefaultBondDenom)
		i = encodeVarintContract(dAtA, i, uint64(len(m.DefaultBondDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintContract(dAtA []byte, offset int, v uint64) int {
	offset -= sovContract(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InstantiateLiquidStakeRateContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	return n
}

func (m *ExecuteLiquidStakeRate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LiquidStakeRate.Size()
	n += 1 + l + sovContract(uint64(l))
	return n
}

func (m *LiquidStakeRate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DefaultBondDenom)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	l = len(m.StkDenom)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	l = m.CValue.Size()
	n += 1 + l + sovContract(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ControllerChainTime)
	n += 1 + l + sovContract(uint64(l))
	return n
}

func sovContract(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozContract(x uint64) (n int) {
	return sovContract(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InstantiateLiquidStakeRateContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContract
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstantiateLiquidStakeRateContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstantiateLiquidStakeRateContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContract(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContract
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteLiquidStakeRate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContract
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteLiquidStakeRate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteLiquidStakeRate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidStakeRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidStakeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContract(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContract
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidStakeRate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContract
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidStakeRate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidStakeRate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultBondDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultBondDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StkDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StkDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControllerChainTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.ControllerChainTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContract(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContract
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipContract(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowContract
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContract
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContract
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthContract
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupContract
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthContract
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthContract        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowContract          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupContract = fmt.Errorf("proto: unexpected end of group")
)
